@import "mixins";
@import "vars";
// Me ha faltado muy poco para implementar bien el modo oscuro y random, así que voy a dejar comentado parte del código para que veas cuál era mi intención. Me ha faltado crear y cambiar el mixin que según el modo recorre un tema u otro. Y por último meterle javascript al botón y con un @if pongo un tema u otro. 
body {
    height: 20vh;
	margin: 0;
	display: grid;
    background-color: $color-fondo;
}

.nav{
    background-color: $color_nav;
    @include flexOptions(row, wrap, space-between, center);
}

.h1{
    color: $color_h1;
    font-size: $font-size-large;
}

button{
    @include botones($color_boton, $color_h1, $color_boton)
}

.listaPeliculas {
    @include flexOptions(row, nowrap, center, start);
    gap: 30 * $unit;
}

.listaPendientes{
    .listaTitulo{
        background-color: darken($color_pendientes, 10%);
        @include h2($font-size);

    }
    div{
        background-color: $color_pendientes;
        border-radius: 20%;
        padding: 20px;
    }
}

.listaPeliculas {
    @include flexOptions(row, nowrap, center, start);
    gap: 30 * $unit;
}

.listaVistas{
    .listaTitulo{
        background-color: darken($color_vistas, 10%);
        @include h2($font-size);

    }
    div{
        background-color: $color_vistas;
        border-radius: 20%;
        padding: 20px;
    }
}

.listaPeliculas {
    @include flexOptions(row, nowrap, center, start);
    gap: 30 * $unit;
}

.listaFavoritas{
    .listaTitulo{
        background-color: darken($color_favs, 10%);
        @include h2($font-size);

    }
    div{
        background-color: $color_favs;
        border-radius: 20%;
        padding: 20px;
    }
}

.listaNoRecomendadas{
    .listaTitulo{
        background-color: darken($color_no_recomendadas, 10%);
        @include h2($font-size);

    }
    div{
        background-color: $color_no_recomendadas;
        border-radius: 30%;
        padding: 20px;
    }
}

@each $tema in $temas {
    $nombre: nth($tema, 1);
    $colores: nth($tema, 2);

    $color_fondo: map-get($colores, '$color_fondo');
    $color_h1: map-get($colores, '$color_h1');
    $color_texto: map-get($colores, '$color_texto');
    $color_nav: map-get($colores, '$color_nav');
    $color_pendientes: map-get($colores, '$color_pendientes');
    $color_vistas: map-get($colores, '$color_vistas');
    $color_favs: map-get($colores, '$color_favs');
    $color_no_recomendadas: map-get($colores, '$color_no_recomendadas');
}



// .tarea {
//     @include tareas($color-fondo-tarea, $borde-tarea, $ancho-tarea, $tamano-texto-tarea, $fuente-tarea);
// }

// @mixin temaTarea($title_color, $icon_color, $text_color, $border_color, $bg_color) {
//     color: $title_color;
//     border: 2px solid $border_color;
//     background-color: $bg_color;
// }

// @each $tema in $temas {
//     $nombre: nth($tema, 1);
//     $colores: nth($tema, 2);

//     $title_color: map-get($colores, '$title_color');
//     $text_color: map-get($colores, '$text_color');
//     $icon_color: map-get($colores, '$icon_color');
//     $border_color: map-get($colores, '$border_color');
//     $bg_color: map-get($colores, '$bg_color');

//     .tarea-#{$nombre} {
//         @include temaTarea($title_color, $icon_color, $text_color, $border_color, $bg_color);
//         // @debug $nombre;
//         @if ($nombre == "light_purple") {
//             .botonEditar, .botonCerrar{
//                 color: $icon_color;
//                 background-color: lighten($text_color,30%);
//             } 
//         }@else if ($nombre == "light_mint") {
//             .botonEditar, .botonCerrar{
//                 color: $text_color;
//                 background-color: lighten($bg_color,10%);
//             }
//         }@else if ($nombre == "gruvbox_light") {
//             .botonEditar, .botonCerrar{
//                 color: $icon_color;
//                 background-color: lighten($bg_color,10%);
//             }
//         }
//     }
            
            
// }


